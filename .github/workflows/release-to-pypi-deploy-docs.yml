name: Release to PyPi and Deploy Docs

on:
  workflow_run:
    workflows: ["Quality control"]
    types:
      - completed

permissions:
  contents: write
  pages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          version=$(poetry version -s)
          echo "VERSION=$version" >> $GITHUB_ENV  # Store the version in GITHUB_ENV for later use

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Build and publish to PyPi
        run: |
          source .venv/bin/activate
          poetry version ${{ env.VERSION }}
          make build-and-publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  deploy-docs:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Deploy documentation
        run: poetry run mkdocs gh-deploy --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
